Day 9 ReadMe:

This is a  Employee Management System dashboard built using React and JSX. The project was initialized using Vite for fast setup and development. The core objective was to practice basic React concepts, including creating functional components, using JSX syntax, rendering dynamic content, and applying basic CSS styling to build a user-friendly UI.

React and JSX were used to structure the UI in a modular and declarative way. The application leverages JSX syntax, which allowed HTML-like code to be written within JavaScript. This made it intuitive to embed JavaScript expressions directly into the UI, such as rendering employee names and looping through data arrays using the map() function. The use of curly braces {} in JSX made it easy to dynamically inject content.

The application consists of two main components: Header and EmployeeDashboard. The Header component is a simple stateless functional component that displays the title "Employee Management System". The EmployeeDashboard component is the core of the application. It contains a hardcoded list of employee data and renders this list dynamically using JSX. Each employee is displayed inside a styled card showing their name, position, and department. The list is generated using the map() function, and each item is assigned a unique key prop based on the index to ensure efficient DOM updates.

One challenge faced during development was ensuring that the layout stretched to fill the entire page width while maintaining a clean and modern look. Initially, the dashboard was centered with excess white space on the right. This was resolved by modifying the CSS to allow full-width stretching using 100vw and proper padding. Another small challenge was in making the components responsive, which was addressed using media queries for mobile screens. Styling was kept minimal and custom to maintain focus on React fundamentals.

Overall, this project served as a practical introduction to working with React components, understanding the power of JSX, and dynamically rendering content within a structured UI.